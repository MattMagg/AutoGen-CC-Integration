# Serverless Framework configuration for deploying AutoGen Lambda functions
service: autogen-claude-integration

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  timeout: 300  # 5 minutes for complex agent workflows
  memorySize: 1024
  
  environment:
    CLAUDE_WRAPPER_URL: ${ssm:/autogen/claude-wrapper-url}
    CLAUDE_AUTH_SECRET: ${self:custom.claudeAuthSecret}
    LOG_LEVEL: INFO
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/autogen/claude-auth*'
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource:
            - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/autogen/*'
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'

custom:
  claudeAuthSecret: /autogen/claude-auth
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
    layer: true
    usePipenv: false
    pythonBin: python3.11
  
  # API Gateway throttling
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 5

functions:
  # Single agent endpoint
  singleAgent:
    handler: lambda_autogen.lambda_handler
    description: Execute single AutoGen agent tasks
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - http:
          path: /agent/single
          method: post
          cors: true
          request:
            schemas:
              application/json:
                schema: ${file(schemas/single-agent-request.json)}
          throttling:
            maxRequestsPerSecond: 10
            maxConcurrentRequests: 5
  
  # Multi-agent pipeline endpoint
  multiAgent:
    handler: lambda_autogen.lambda_handler
    description: Execute multi-agent AutoGen pipelines
    layers:
      - !Ref PythonRequirementsLambdaLayer
    events:
      - http:
          path: /agent/pipeline
          method: post
          cors: true
          request:
            schemas:
              application/json:
                schema: ${file(schemas/multi-agent-request.json)}
          throttling:
            maxRequestsPerSecond: 5
            maxConcurrentRequests: 2
  
  # Async job submission (for long-running workflows)
  asyncJob:
    handler: async_handler.submit_job
    description: Submit async AutoGen job to SQS
    layers:
      - !Ref PythonRequirementsLambdaLayer
    environment:
      JOB_QUEUE_URL: !Ref JobQueue
    events:
      - http:
          path: /agent/async
          method: post
          cors: true
  
  # Job processor (triggered by SQS)
  jobProcessor:
    handler: async_handler.process_job
    description: Process AutoGen jobs from queue
    layers:
      - !Ref PythonRequirementsLambdaLayer
    timeout: 900  # 15 minutes for complex workflows
    memorySize: 2048
    reservedConcurrency: 5
    events:
      - sqs:
          arn: !GetAtt JobQueue.Arn
          batchSize: 1

resources:
  Resources:
    # SQS Queue for async jobs
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-jobs
        VisibilityTimeout: 960  # 16 minutes
        MessageRetentionPeriod: 86400  # 24 hours
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt JobDLQ.Arn
          maxReceiveCount: 3
    
    # Dead Letter Queue
    JobDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-jobs-dlq
        MessageRetentionPeriod: 1209600  # 14 days
    
    # S3 Bucket for job results
    ResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-results
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldResults
              Status: Enabled
              ExpirationInDays: 30
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
    
    # DynamoDB table for job tracking
    JobTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-jobs
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

  Outputs:
    ApiUrl:
      Description: API Gateway endpoint URL
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - !Ref ApiGatewayRestApi
            - '.execute-api.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - ${self:provider.stage}
    
    JobQueueUrl:
      Description: SQS Queue URL for async jobs
      Value: !Ref JobQueue
    
    ResultsBucketName:
      Description: S3 bucket for job results
      Value: !Ref ResultsBucket

plugins:
  - serverless-python-requirements
  - serverless-api-gateway-throttling

package:
  exclude:
    - node_modules/**
    - .venv/**
    - __pycache__/**
    - .pytest_cache/**
    - tests/**