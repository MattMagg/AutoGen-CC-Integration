[tool.poetry]
name = "autogen-claude-integration"
version = "0.1.0"
description = "Integration framework for AutoGen multi-agent systems with Claude AI models through OpenAI-compatible API"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/MattMagg/AutoGen-CC-Integration"
repository = "https://github.com/MattMagg/AutoGen-CC-Integration"
keywords = ["autogen", "claude", "ai", "agents", "multi-agent", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.9"

# AutoGen Framework
autogen-agentchat = "^0.5.7"
autogen-core = "^0.5.7"
autogen-ext = "^0.5.7"
autogenstudio = "^0.4.2.2"

# AI/LLM Dependencies
openai = "^1.75.0"
anthropic = "^0.54.0"

# Web Framework
fastapi = "^0.115.13"
uvicorn = { extras = ["standard"], version = "^0.34.0" }
pydantic = "^2.11.7"
pydantic-settings = "^2.8.1"

# Database
alembic = "^1.15.2"
sqlalchemy = "^2.0.0"
aiosqlite = "^0.21.0"
sqlite-utils = "^3.17"

# Authentication & Security
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
python-multipart = "^0.0.17"

# Utilities
python-dotenv = "^1.0.0"
httpx = "^0.28.1"
requests = "^2.32.0"
rich = "^13.7.0"
typer = "^0.16.0"
click = "^8.1.7"

# Data Processing
pandas = "^2.2.0"
numpy = "^1.26.0"
matplotlib = "^3.8.0"

# Testing
pytest = "^8.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

# Development Tools
black = "^24.0.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.5.0"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }

# Optional: LangChain integration (if needed)
langchain = { version = "^0.3.0", optional = true }
langchain-anthropic = { version = "^0.3.15", optional = true }
langchain-openai = { version = "^0.3.21", optional = true }

# Optional: Additional tools
websockets = { version = "^14.1", optional = true }
redis = { version = "^5.0.0", optional = true }
celery = { version = "^5.3.0", optional = true }

[tool.poetry.extras]
langchain = ["langchain", "langchain-anthropic", "langchain-openai"]
distributed = ["redis", "celery"]
websocket = ["websockets"]
all = ["langchain", "langchain-anthropic", "langchain-openai", "websockets", "redis", "celery"]

[tool.poetry.group.dev.dependencies]
ipython = "^8.18.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"

[tool.poetry.scripts]
autogen-claude = "autogen.cli:main"
claude-wrapper = "wrapper.main:start_server"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["*/migrations/*", "*/venv/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=autogen --cov-report=term-missing"
testpaths = [
    "tests",
    "autogen/tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["autogen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "D103"]